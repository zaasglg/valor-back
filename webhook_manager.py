#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä Telegram Webhook - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook
"""

import requests
import sys
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '8468171708:AAFKFJtEGUb-RW2DdiMiU8hNZ_pkffVZSPI'
WEBHOOK_URL = 'https://api.valor-games.co/api/telegram-webhook/'
BASE_URL = f'https://api.telegram.org/bot{BOT_TOKEN}'


def print_success(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    print(f"{Fore.GREEN}‚úÖ {message}{Style.RESET_ALL}")


def print_error(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    print(f"{Fore.RED}‚ùå {message}{Style.RESET_ALL}")


def print_info(message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"{Fore.CYAN}‚ÑπÔ∏è  {message}{Style.RESET_ALL}")


def print_warning(message):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"{Fore.YELLOW}‚ö†Ô∏è  {message}{Style.RESET_ALL}")


def get_webhook_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"""
    try:
        response = requests.get(f'{BASE_URL}/getWebhookInfo')
        result = response.json()
        
        if result.get('ok'):
            webhook_info = result.get('result', {})
            
            print("\n" + "="*60)
            print(f"{Fore.CYAN}üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û WEBHOOK{Style.RESET_ALL}")
            print("="*60)
            
            url = webhook_info.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            if url:
                print_success(f"URL: {url}")
            else:
                print_error("URL: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            pending = webhook_info.get('pending_update_count', 0)
            if pending > 0:
                print_warning(f"–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {pending}")
            else:
                print_success(f"–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {pending}")
            
            last_error = webhook_info.get('last_error_message')
            if last_error:
                print_error(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
                last_error_date = webhook_info.get('last_error_date')
                if last_error_date:
                    from datetime import datetime
                    error_time = datetime.fromtimestamp(last_error_date)
                    print_info(f"–í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {error_time.strftime('%d.%m.%Y %H:%M:%S')}")
            else:
                print_success("–û—à–∏–±–æ–∫ –Ω–µ—Ç")
            
            print_info(f"Max connections: {webhook_info.get('max_connections', 40)}")
            
            ip_address = webhook_info.get('ip_address')
            if ip_address:
                print_info(f"IP –∞–¥—Ä–µ—Å: {ip_address}")
            
            print("="*60 + "\n")
            return True
        else:
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook")
            return False
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return False


def set_webhook(drop_pending=False):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
    try:
        params = {'url': WEBHOOK_URL}
        if drop_pending:
            params['drop_pending_updates'] = 'true'
        
        response = requests.post(f'{BASE_URL}/setWebhook', data=params)
        result = response.json()
        
        if result.get('ok'):
            print_success("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print_info(f"URL: {WEBHOOK_URL}")
            if drop_pending:
                print_info("–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
            return True
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:")
            print_error(result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            return False
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return False


def delete_webhook(drop_pending=False):
    """–£–¥–∞–ª—è–µ—Ç webhook"""
    try:
        params = {}
        if drop_pending:
            params['drop_pending_updates'] = 'true'
        
        response = requests.post(f'{BASE_URL}/deleteWebhook', data=params)
        result = response.json()
        
        if result.get('ok'):
            print_success("Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            if drop_pending:
                print_info("–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
            return True
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook")
            return False
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        return False


def reset_webhook():
    """–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print_info("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫—É webhook...")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook —Å –æ—á–∏—Å—Ç–∫–æ–π
    if delete_webhook(drop_pending=True):
        print_info("–ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
        import time
        time.sleep(2)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        if set_webhook(drop_pending=True):
            print_success("Webhook —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print_info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...")
            time.sleep(1)
            get_webhook_info()
            return True
    
    print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
    return False


def test_webhook():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        response = requests.get(f'{BASE_URL}/getMe')
        result = response.json()
        
        if result.get('ok'):
            bot_info = result.get('result', {})
            print_success(f"–ë–æ—Ç: @{bot_info.get('username', 'N/A')}")
            print_info(f"ID: {bot_info.get('id', 'N/A')}")
            print_info(f"–ò–º—è: {bot_info.get('first_name', 'N/A')}")
            return True
        else:
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
            return False
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"\n{Fore.BLUE}{'='*60}")
    print(f"{Fore.BLUE}ü§ñ TELEGRAM WEBHOOK MANAGER")
    print(f"{Fore.BLUE}{'='*60}{Style.RESET_ALL}\n")
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'info':
            get_webhook_info()
        elif command == 'set':
            set_webhook()
        elif command == 'delete':
            delete_webhook()
        elif command == 'reset':
            reset_webhook()
        elif command == 'test':
            test_webhook()
        else:
            print_error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print_usage()
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        while True:
            print("\n" + "="*60)
            print(f"{Fore.CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{Style.RESET_ALL}")
            print("1. üìã –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook")
            print("2. ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
            print("3. üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
            print("4. ‚ùå –£–¥–∞–ª–∏—Ç—å webhook")
            print("5. üß™ –¢–µ—Å—Ç –±–æ—Ç–∞")
            print("6. üö™ –í—ã—Ö–æ–¥")
            print("="*60)
            
            choice = input(f"\n{Fore.YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-6): {Style.RESET_ALL}").strip()
            
            if choice == '1':
                get_webhook_info()
            elif choice == '2':
                set_webhook()
            elif choice == '3':
                reset_webhook()
            elif choice == '4':
                delete_webhook()
            elif choice == '5':
                test_webhook()
            elif choice == '6':
                print_success("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def print_usage():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print(f"""
{Fore.CYAN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:{Style.RESET_ALL}
    python webhook_manager.py [command]

{Fore.CYAN}–ö–æ–º–∞–Ω–¥—ã:{Style.RESET_ALL}
    info    - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    set     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook
    reset   - –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook (—Å –æ—á–∏—Å—Ç–∫–æ–π)
    delete  - –£–¥–∞–ª–∏—Ç—å webhook
    test    - –¢–µ—Å—Ç –±–æ—Ç–∞
    
{Fore.CYAN}–ü—Ä–∏–º–µ—Ä—ã:{Style.RESET_ALL}
    python webhook_manager.py info
    python webhook_manager.py reset
    python webhook_manager.py
    """)


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ colorama
        try:
            from colorama import init, Fore, Style
        except ImportError:
            print("‚ö†Ô∏è  –î–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ colorama: pip install colorama")
            print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ü–≤–µ—Ç–æ–≤...\n")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
            class DummyColor:
                def __getattr__(self, name):
                    return ''
            Fore = Style = DummyColor()
        
        main()
    except KeyboardInterrupt:
        print(f"\n\n{Fore.YELLOW}‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Style.RESET_ALL}")
        sys.exit(0)
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        sys.exit(1)
