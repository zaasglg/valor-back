import requests
import os
from django.conf import settings
from .models import Transaction, UserProfile
from datetime import datetime
import random

class TelegramBot:
    def __init__(self):
        self.bot_token = '8468171708:AAFKFJtEGUb-RW2DdiMiU8hNZ_pkffVZSPI'
        self.chat_id = '-1002909289551'
        self.base_url = f'https://api.telegram.org/bot{self.bot_token}'
    
    def send_receipt_notification(self, transaction):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–µ–∫–µ –≤ Telegram —á–∞—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_profile = UserProfile.objects.filter(user_id=transaction.user_id).first()
            user_name = f"{user_profile.nombre} {user_profile.apellido}" if user_profile else "Usuario"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""üÜï Nuevo cheque subido
                üë§ Usuario: {transaction.user_id}
                üí∞ Monto: {transaction.transacciones_monto} {transaction.currency}
                üî¢ N¬∞ Transacci√≥n: ‚Ññ{transaction.transaccion_number}
                üìÖ Fecha: {transaction.transacciones_data.strftime('%d.%m.%Y %H:%M:%S')}
                üìÅ Archivo: {transaction.file_name}
                üß© Chat_id: {transaction.chat_id}

                Responde con + para aprobar o - para rechazar"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f'{self.base_url}/sendMessage'
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, data=data)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    transaction.message_id = str(result['result']['message_id'])
                    transaction.save()
                    return True
            
            return False
            
        except Exception as e:
            print(f"Error sending telegram notification: {e}")
            return False
    
    def send_receipt_with_image_from_file(self, transaction, image_file):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram —á–∞—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_profile = UserProfile.objects.filter(user_id=transaction.user_id).first()
            user_name = f"{user_profile.nombre} {user_profile.apellido}" if user_profile else "Usuario"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            caption = f"""üÜï Nuevo cheque subido
üë§ Usuario: {transaction.user_id}
üí∞ Monto: {transaction.transacciones_monto} {transaction.currency}
üî¢ N¬∞ Transacci√≥n: ‚Ññ{transaction.transaccion_number}
üìÖ Fecha: {transaction.transacciones_data.strftime('%d.%m.%Y %H:%M:%S')}
üìÅ Archivo: {transaction.file_name}
üß© Chat_id: {transaction.chat_id}

Responde con + para aprobar o - para rechazar"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            url = f'{self.base_url}/sendPhoto'
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫
            files = {'photo': image_file}
            data = {
                'chat_id': self.chat_id,
                'caption': caption,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, files=files, data=data)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    transaction.message_id = str(result['result']['message_id'])
                    transaction.save()
                    return True
            
            return False
            
        except Exception as e:
            print(f"Error sending telegram photo: {e}")
            return False
    
    def process_approval_response(self, message_id, response_text, user_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            transaction = None
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å message_id, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –Ω–µ–º—É
            if message_id:
                print(f"üîç Looking for transaction with message_id: {message_id}")
                transaction = Transaction.objects.filter(message_id=str(message_id)).first()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ message_id –∏–ª–∏ message_id –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–∂–∏–¥–∞—é—â—É—é
            if not transaction:
                if message_id:
                    print(f"‚ùå Transaction not found for message_id: {message_id}")
                else:
                    print(f"‚ö†Ô∏è No message_id provided, searching for latest pending transaction")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å—Ç–∞—Ç—É—Å–µ 'esperando'
                transaction = Transaction.objects.filter(estado='esperando').order_by('-created_at').first()
                if transaction:
                    print(f"üîÑ Found pending transaction: {transaction.transaccion_number}")
                    # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º message_id, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                else:
                    print(f"‚ùå No pending transactions found")
                    return False
            
            print(f"‚úÖ Found transaction: {transaction.transaccion_number}, status: {transaction.estado}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
            if transaction.estado != 'esperando':
                print(f"‚ùå Transaction already processed: {transaction.estado}")
                return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if response_text.strip() == '+':
                print(f"‚úÖ Approving transaction: {transaction.transaccion_number}")
                
                # –û–¥–æ–±—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
                transaction.estado = 'aprobado'
                transaction.processed_at = datetime.now()
                transaction.processed_by = str(user_id)
                transaction.save()
                
                # –ü–æ–ø–æ–ª–Ω—è–µ–º —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print(f"üîç Searching for user profile with user_id: {transaction.user_id} (type: {type(transaction.user_id)})")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                user_profile = None
                
                # –ü–æ–ø—ã—Ç–∫–∞ 1: –ø–æ–∏—Å–∫ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                user_profile = UserProfile.objects.filter(user_id=str(transaction.user_id)).first()
                if user_profile:
                    print(f"‚úÖ User found by string user_id")
                else:
                    # –ü–æ–ø—ã—Ç–∫–∞ 2: –ø–æ–∏—Å–∫ –∫–∞–∫ —á–∏—Å–ª–æ
                    try:
                        user_profile = UserProfile.objects.filter(user_id=int(transaction.user_id)).first()
                        if user_profile:
                            print(f"‚úÖ User found by integer user_id")
                    except (ValueError, TypeError):
                        pass
                
                if user_profile:
                    old_deposit = user_profile.deposit
                    old_bonificaciones = user_profile.bonificaciones
                    old_first_bonus_used = user_profile.first_bonus_used
                    
                    print(f"üë§ User info: {user_profile.nombre} {user_profile.apellido} (email: {user_profile.email})")
                    print(f"üí∞ Current deposit: {old_deposit}")
                    print(f"üíµ Amount to add: {transaction.transacciones_monto}")
                    print(f"üéÅ First bonus used: {old_first_bonus_used}")
                    
                    # –ü–æ–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (deposit)
                    from decimal import Decimal
                    user_profile.deposit = Decimal(str(user_profile.deposit)) + Decimal(str(transaction.transacciones_monto))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if not user_profile.first_bonus_used:
                        # –°—á–∏—Ç–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)
                        approved_count = Transaction.objects.filter(
                            user_id=str(transaction.user_id),
                            estado='aprobado'
                        ).count()
                        
                        print(f"üìä Total approved transactions for this user: {approved_count}")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                        if approved_count == 1:
                            user_profile.first_bonus_used = True
                            print(f"üéâ This is the first deposit! Setting first_bonus_used = True")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    try:
                        user_profile.save()
                        print(f"‚úÖ Balance updated successfully!")
                        print(f"   Deposit: {old_deposit} -> {user_profile.deposit} (+{transaction.transacciones_monto})")
                        print(f"   Bonificaciones: {old_bonificaciones} -> {user_profile.bonificaciones}")
                        print(f"   First bonus used: {old_first_bonus_used} -> {user_profile.first_bonus_used}")
                    except Exception as save_error:
                        print(f"‚ùå Error saving user profile: {save_error}")
                        import traceback
                        traceback.print_exc()
                        return False
                else:
                    print(f"‚ùå User profile not found for user_id: {transaction.user_id}")
                    print(f"   Available users: {list(UserProfile.objects.values_list('user_id', flat=True)[:10])}")
                    return False
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                self.send_confirmation_message(transaction, 'approved')
                print(f"üì± Confirmation message sent")
                return True
                
            elif response_text.strip() == '-':
                print(f"‚ùå Rejecting transaction: {transaction.transaccion_number}")
                
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
                transaction.estado = 'rechazado'
                transaction.processed_at = datetime.now()
                transaction.processed_by = str(user_id)
                transaction.save()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                self.send_confirmation_message(transaction, 'rejected')
                print(f"üì± Rejection message sent")
                return True
            
            print(f"‚ùå Invalid response text: '{response_text}'")
            return False
            
        except Exception as e:
            print(f"‚ùå Error processing approval response: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def send_confirmation_message(self, transaction, status):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            status_text = "‚úÖ APROBADO" if status == 'approved' else "‚ùå RECHAZADO"
            
            message = f"""{status_text}
üë§ Usuario: {transaction.user_id}
üí∞ Monto: {transaction.transacciones_monto} {transaction.currency}
üî¢ N¬∞ Transacci√≥n: ‚Ññ{transaction.transaccion_number}
üìÖ Procesado: {transaction.processed_at.strftime('%d.%m.%Y %H:%M:%S')}
üë®‚Äçüíº Por: {transaction.processed_by}"""
            
            url = f'{self.base_url}/sendMessage'
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            requests.post(url, data=data)
            
        except Exception as e:
            print(f"Error sending confirmation: {e}")
    
    def generate_transaction_number(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        while True:
            number = random.randint(100000000, 999999999)
            if not Transaction.objects.filter(transaccion_number=str(number)).exists():
                return str(number)
    
    def send_registration_notification(self, user_id, country, ref):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Telegram"""
        try:
            # –°–ª–æ–≤–∞—Ä—å —Ñ–ª–∞–≥–æ–≤ —Å—Ç—Ä–∞–Ω
            country_flags = {
                'Paraguay': 'üáµüáæ',
                'Colombia': 'üá®üá¥',
                'Ecuador': 'üá™üá®',
                'Argentina': 'üá¶üá∑',
                'Bolivia': 'üáßüá¥',
                'Brazil': 'üáßüá∑',
                'Chile': 'üá®üá±',
                'Costa Rica': 'üá®üá∑',
                'Cuba': 'üá®üá∫',
                'Dominican Republic': 'üá©üá¥',
                'El Salvador': 'üá∏üáª',
                'Guatemala': 'üá¨üáπ',
                'Honduras': 'üá≠üá≥',
                'Mexico': 'üá≤üáΩ',
                'Nicaragua': 'üá≥üáÆ',
                'Panama': 'üáµüá¶',
                'Peru': 'üáµüá™',
                'Uruguay': 'üá∫üáæ',
                'Venezuela': 'üáªüá™'
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é üåç, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ)
            flag = country_flags.get(country, 'üåç')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"‚úÖ –†–µ–≥: {user_id}\n{flag} –°—Ç—Ä–∞–Ω–∞: {country}\n\nüë§ –†–µ—Ñ: {ref}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f'{self.base_url}/sendMessage'
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, data=data)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    print(f"‚úÖ Registration notification sent for user: {user_id}")
                    return True
            
            print(f"‚ùå Failed to send registration notification: {response.text}")
            return False
            
        except Exception as e:
            print(f"‚ùå Error sending registration notification: {e}")
            return False
